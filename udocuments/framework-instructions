开发框架使用简要：
此框架基于Retrofit+OKHttp+EventBus搭建，开发语言主要是Kotlin、Java.
1、包功能说明
app  存放自定义Application
constant    存放一下常量
http     网络请求
apiconfig 网络url、header配置
beans    实体类
xxApi    各个模块网络请求Api
util     工具类
ui      界面相关
activity  存放activity类
adapter   存放适配器
dialog    存放Dialog类
fragments 存放Fragment类
widget    存放自定义控件类

2、重要类说明
HttpConfig             网络请求BaseUrl测试环境和发布环境配置类
HttpHeaderConfig       Http请求Header配置类
ApiFactory             Api网络请求工厂类
RetrofitClient         Retrofit配置类
OKHttpFactory          OKHttp工厂类
HttpLoggerInterceptor  记录请求和响应信息的OkHttp拦截器
BaseActivity            Activity基类
BaseListActivity        带List Activity基类
BaseFragment            Fragment基类
BaseListFragment        带List Fragment基类
BaseDialog              普通Dialog基类
BaseBottomDialog        底部显示Dialog基类
ProgressBarDialog       网络请求加载进度Dialog
等
3、封装的重要功能说明
3、1 网络的配置和使用
1）HttpConfig类配置网络环境BaseUrl
2）HttpHeaderConfig配置所需的Header
3）DemoAPI（也可以自定义功能模块名字）接口中定义请求方式（如Get，Post等）、url详细地址、所需参数、header、返回数据接收的数据类
例：@GET("posts")
    fun userInfo(@HeaderMap map: Map<String, String> = loginHeader()): Call<ArrayList<TestBase>>
4）在ApiFactory注册DemoApi获得api实例。
5）在DemoApiUtils顶层函数中写具体DemoApi请求方法的实现
3、2 请求数据返回结果处理（EventBus事件总线）
3.2.1 请求网络方法与结果返回同一个Activity（其他页面的onEvent方法不接收此网络请求结果）
object HttpCommonUtil {
    fun <T> putMessageToActivity(context: Context,p1: Response<T>?,isNormal:Boolean) {
        if (p1?.code() == 200) {
            when (p1.headers()?.get("error-code").isNullOrEmpty()) {
                true -> {
                    if (isNormal) {
                        XEventBus.getDefault()
                            .post(ResponseBase(p1.body(), object : IXEventSubsciber {
                                override fun getId(): Any {
                                    return context
                                }

                            }))
                    } else {
                        EventBus.getDefault().post(p1.body()?: "")
                    }
                }
                false -> {
                    return
                }
            }
        } else {
            //错误处理
        }

    }

}
此方式isNormal可不传参数，默认true。ResponseBase将网络请求结果封装了一层。
主要通过ResponseBase确认数据传回的页面。
需要接受的页面需要实现IXEventSubsciber接口并且重写getId方法。
 //接收者需要实现同样的接口
    override fun getId(): Any? {
        return this
    }
详细的例子可以看MainListActivity中的Demo

3.2.2 请求网络方法与结果返回不限制页面
和普通EventBus使用一样。只是要将DemoApiUtils中的方法传isNomal为false

4.使用的三方依赖说明

4、1 Kotlin开发框架使用Anko框架
4、2 事件总线EventBus
 implementation 'org.greenrobot:eventbus:3.2.0'
4、3 网络请求OkHttp
4、4 网络封装retrofit
4、5 数据Json解析Gson
4、6 反应式编程rxkotlin 、rxjava
4、7 rxbinding2：RxBinding 能够把 Android 平台的兼容包内的 UI 控件变为 Observaber 对象.
可以把 UI 控件的事件当作 RxJava 中的数据流来使用.
4、8 图片处理glide
适配器三方：
  //adapter
    implementation 'net.idik:slimadapter:2.1.1'
 //添加底部dialog
    implementation 'me.shaohui:bottomdialog:1.1.9'

5、工具类说明
AppUtils 获取app信息（如名字、版本号）
ConvertUtils 转换相关工具类
EncodeUtils 编码解码相关工具类
KeyboardUtils 键盘相关工具类
NetUtils 网络相关辅助类
PermissionUtils 动态权限处理
RegexUtils 正则相关工具类
RxUtil rxbinding2点击事件处理类（如防止短时间多次点击）
ScreenUtils 屏幕相关辅助类
SDCardUtils SD卡相关的辅助类
SizeUtils 尺寸相关工具类
SPUtils SharedPreferences封装类
